openapi: 3.0.3
info:
  title: Your Laravel API
  version: 1.0.0
  description: API documentation for your Laravel application

servers:
  # - url: https://api.yourdomain.com
  #   description: Production server
  - url: http://localhost:8000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Event:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Sample Event"
        description:
          type: string
          example: "An example event description"
        venue:
          type: string
          example: "Convention Center"
        date:
          type: string
          format: date
          example: "2025-06-20"
        price:
          type: number
          format: float
          example: 100.00
        max_attendees:
          type: integer
          example: 200
        organization_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Admin:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Admin User"
        email:
          type: string
          format: email
          example: "admin@example.com"
        organization_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AttendeeRegistration:
      type: object
      required:
        - event_id
        - name
        - email
        - phone
      properties:
        event_id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        phone:
          type: string
          example: "+1234567890"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@example.com"
        password:
          type: string
          format: password
          example: "secret123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        admin:
          $ref: '#/components/schemas/Admin'

paths:
  /api/events:
    get:
      summary: Get all events for authenticated user's organization
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Create a new event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /api/events/{id}:
    get:
      summary: Get event details by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Event ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    put:
      summary: Update an event
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Event ID
          required: true
          schema:
            type: integer
      requestBody:
        description: Event fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    delete:
      summary: Delete an event
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Event ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Event deleted

  /api/public/events:
    get:
      summary: Get public events (upcoming)
      responses:
        '200':
          description: List of upcoming events for an organization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /api/public/events/register:
    post:
      summary: Register attendee for an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendeeRegistration'
      responses:
        '200':
          description: Registration success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registered successfully.
        '404':
          description: Event not found

  /api/admins:
    get:
      summary: List all admins in organization
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of admins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'
    post:
      summary: Create a new admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "Admin User"
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                password:
                  type: string
                  format: password
                  example: "secret123"
      responses:
        '201':
          description: Admin created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'

  /api/admins/{id}:
    get:
      summary: Get admin by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Admin details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '404':
          description: Admin not found
    put:
      summary: Update admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Fields to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Admin updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '404':
          description: Admin not found
    delete:
      summary: Delete admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Admin deleted

  /api/admin/auth/login:
    post:
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /api/admin/auth/me:
    get:
      summary: Get current authenticated admin user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'

  /api/admin/auth/logout:
    post:
      summary: Logout current admin user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out
